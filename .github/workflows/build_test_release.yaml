# This workflows handles any updates in the source codes
# and/or image dockerfiles.
# The building image is built on-the-fly using the base
# image (no release images of the dependent repos!),
# and then is used to create a container within which
# the building process happens (container action).
# In the end two new release images
# ghcr.io/nwchemex-ci-test/release_parallelzone:gcc(clang)-latest
# are generated. Whether these images are stable
# (do not break any downstream repos) or not is still 
# to be tested.
# This workflow should run in the branch which opens a
# PR to dev.

name: Build test release

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:
  push:
    branches: dev_pr3

jobs:
  # TODO: obtain package version info
  # general packages for all repos: from NWXCmake
  # specific packages for a repo: from dependency_versions.txt in
  # the repo
  #
  # A job to retrieve all package versions and output
  ###
  docker-file-changes:
    runs-on: ubuntu-latest
    outputs:
      build_dockfile: ${{ steps.changes.outputs.bdfile }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          bdfile:
            - 'Dockerfile/**'

  update-base-image:  
    needs: docker-file-changes
    if: ${{ needs.docker-file-changes.outputs.build_dockfile == 'true' }}
    uses: NWChemEx-CI-test/ParallelZone/.github/workflows/build_base.yaml@master
    secrets: inherit   

  build_update_check:
    runs-on: ubuntu-latest
    needs: docker-file-changes
    outputs:
      bi_check: ${{ steps.building-image-update.outputs.tag }}
    steps:
      - name: Check if the building image has been updated
        id: building-image-update
        run: |
          if [ ${{ needs.docker-file-changes.outputs.build_dockfile == 'true' }} ]; then
             tag="latest"
          else
             tag="stable"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

  build-test-gcc:
    uses: NWChemEx-CI-test/.github/.github/workflows/build_test_release_tmpl.yaml@master
    needs: [update-base-image, build_update_check]
    if: always() && (needs.update-base-image.result == 'success' || needs.update-base-image.result == 'skipped')
    with: 
      repo: ParallelZone
      clang-build: false
      gcc-build: true
      ninja_build: true
      test: true
      integration_test: false
      install: true
      base_image_tag: ${{needs.build_update_check.outputs.bi_check}}
    secrets: inherit 
    #CMAIZE_GITHUB_TOKEN: ${{ secrets.CMAIZE_GITHUB_TOKEN }}
    #DOCKER_PAT: {{ secrets.DOCKER_PAT }}

  build-test-clang:
    uses: NWChemEx-CI-test/.github/.github/workflows/build_test_release_tmpl.yaml@master
    needs: [update-base-image, build_update_check]
    if: always() && (needs.update-base-image.result == 'success' || needs.update-base-image.result == 'skipped')
    with:
      repo: ParallelZone
      clang-build: true
      gcc-build: false
      ninja_build: true
      test: true
      integration_test: false
      install: true
      base_image_tag: ${{needs.build_update_check.outputs.bi_check}}
    secrets: inherit
  
